<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>caas-lean-sldc-reference-project</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<sonar.sources>src/main</sonar.sources>
		<sonar.tests>src/test</sonar.tests>
		<!-- Below property indicates the pattern of the test suite -->

		<runSuite>**/*Suite.class</runSuite>

		<!-- Sonar-JaCoCo properties -->

		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>

		<sonar.javascript.coveragePlugin>lcov</sonar.javascript.coveragePlugin>

		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>

		<sonar.jacoco.reportPaths>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPaths>
	</properties>

	<dependencies>
		<!-- Testing dependencies. -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>1.5.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>1.5.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.stefanbirkner</groupId>
			<artifactId>system-rules</artifactId>
			<version>1.4.0</version>
			<scope>test</scope>
			<!-- junit:junit-dep is deprecated, and junit:junit replaces it. -->
			<exclusions>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit-dep</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Configures the compiler. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<executions>
					<execution>
						<id>compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>testCompile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
				<!--  these 2 configuration may not be required in Jenkins setup -->
<!-- 					<fork>true</fork>
                <executable>C:\Eee\jdk-11\bin\javac.exe</executable>					 -->
					<compilerArgument>-Xlint:all</compilerArgument>
					<compilerArgs>
						<arg>-Xlint:all</arg>
						<arg>-XDcompilePolicy=simple</arg>
						<arg>-Xplugin:ErrorProne</arg> <!-- Error prone works with JDK >= 9 -->
					</compilerArgs>
					<annotationProcessorPaths>
						<path>
							<groupId>com.google.errorprone</groupId>
							<artifactId>error_prone_core</artifactId>
							<version>2.3.4</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
				<dependencies>
                    <dependency>
                        <groupId>com.google.errorprone</groupId>
                        <artifactId>error_prone_core</artifactId>
                        <version>2.3.4</version>
                    </dependency>
                </dependencies>
			</plugin>
			<!--<plugin> Configures the compiler. <groupId>org.apache.maven.plugins</groupId> 
				<artifactId>maven-compiler-plugin</artifactId> <version>3.1</version> <configuration> 
				<source>1.6</source> <target>1.6</target> <compilerArgs> <arg>-Xlint</arg> 
				</compilerArgs> </configuration> </plugin> -->
			<plugin>
				<!-- Unit tests are run by surefire. -->
				<!-- Classes under src/test/java called *Test are included automatically. -->
				<!-- Integration tests are run during the test phase. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
			</plugin>
			<plugin>
				<!-- Integration tests are run by failsafe. -->
				<!-- Classes under src/test/java called *IT are included automatically. -->
				<!-- Integration tests are run during the verify phase. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.16</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.9</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<!-- <execution> <id>default-check</id> <goals> <goal>check</goal> </goals> 
						<configuration> <destFile>${sonar.jacoco.reportPath}</destFile> <append>true</append> 
						<rules> implementation is needed only for Maven 2 <rule implementation="org.jacoco.maven.RuleConfiguration"> 
						<element>BUNDLE</element> <limits> implementation is needed only for Maven 
						2 <limit implementation="org.jacoco.report.check.Limit"> <counter>COMPLEXITY</counter> 
						<value>COVEREDRATIO</value> <minimum>0.01</minimum> </limit> </limits> </rule> 
						</rules> </configuration> </execution> -->
				</executions>
			</plugin>

		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<!-- JUnit code coverage. -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.6</version>
			</plugin>
		</plugins>
	</reporting>

</project>
